<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on PoolBee的博客</title>
    <link>http://localhost:1313/categories/java/</link>
    <description>Recent content in Java on PoolBee的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 22 Dec 2024 15:15:30 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JDK安装</title>
      <link>http://localhost:1313/post/jdk/</link>
      <pubDate>Sun, 22 Dec 2024 15:15:30 +0000</pubDate>
      <guid>http://localhost:1313/post/jdk/</guid>
      <description>JDK17和JDK1.8区别 1.8版本之前，jdk和jre是分开的，例如：1.6版本&#xA;17和21的版本是企业在用的&#xA;一、jdk目录文件解释 C:\Program Files\Java\&#xA;这是一般默认安装JDK的路径。&#xA;bin目录下都是可执行文件 D:\Javaweb\java8\jdk1.8\bin&#xA;bin下有java.exe和javac.exe&#xA;jdk/bin目录下有java.exe和javac.exe&#xA;配置环境变量的目的：任意目录下执行java程序 什么是接口 只定义行为，不做实现。&#xA;由具体的东西取实现&#xA;jdk中的jre是java运行环境&#xA;lib：java开发工具包&#xA;开发这个程序的时候，第三方其他人开发的东西。&#xA;src.zip是jdk的源码 例如：String字符串是一个类，是java提供的，这个String就是在src.zip/java/lang包下。 这个里面的String的所有的类的源码在这里。&#xA;这里indexOf方法的源码就再这里。&#xA;THIRDPARTYLICENSEREADME.txt 用于记录和展示项目中所有第三方组件及其许可证信息的重要文档。&#xA;THIRDPARTYLICENSEREADME-JAVAFX.txt 包含 JavaFX 所依赖的第三方组件及其许可证信息的文档。它确保了在分发、使用或修改 JavaFX 时，遵守所有相关的开源许可证要求。&#xA;二、环境变量配置 path是系统环境变量（windows电脑都有）&#xA;这个是系统变量中的Path 第一步：设置%javahome%/bin&#xA;这个是系统变量中的JAVA_HOME 为什么先配path中要配%javahome%/bin，再配javahome？ 第一：方便后续修改jdk目录 如果更改jdk的路径，那么直接更改%JAVA_HOME%变量的路径即可&#xA;第二：方便后续软件安装不报错 有些软件在安装的时候会先找%javahome%再找系统path中的/bin。&#xA;导致一些软件在安装的时候会失败。&#xA;执行过程？ 交给jvm，让计执行class文件，让计算机系统读懂这个程序。&#xA;环境变量配置—报错 错误：&#xA;C:\Users\anymore&amp;gt;java -version Error: could not open `E:\java-jre\lib\amd64\jvm.cfg&#39;&#xA;error:could not open &amp;hellip;jvm.cfg解决方法 - aspirant - 博客园&#xA;移动到最前面即可&#xA;运行成功</description>
    </item>
    <item>
      <title>流操作和函数式编程</title>
      <link>http://localhost:1313/post1/java/</link>
      <pubDate>Tue, 28 Mar 2023 11:08:00 +0000</pubDate>
      <guid>http://localhost:1313/post1/java/</guid>
      <description>流操作 是Java 8中引入的一种数据处理模式，通常涉及数据的读取、写入、转换、过滤等，这些操作可以在数据流上连续进行，形成一条处理链。&#xA;例如：stream() 方法是 Java 8 引入的 Stream API 的一部分，它用于将集合（如数组、列表等）转换为流（Stream）。&#xA;例如：能用max()和min()对流操作找到流中的最大元素。&#xA;[参数:可用Comparator接口自定义比较的逻辑]&#xA;import java.util.Arrays; import java.util.Optional; import java.util.Comparator; public class StreamExample { public static void main(String[] args) { Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5}; // 使用默认比较器找到最大元素 Optional&amp;lt;Integer&amp;gt; max = Arrays.stream(numbers).max(); max.ifPresent(System.out::println); // 输出：9 // 使用默认比较器找到最小元素 Optional&amp;lt;Integer&amp;gt; min = Arrays.stream(numbers).min(); min.ifPresent(System.out::println); // 输出：1 // 使用自定义比较器找到最大元素（基于绝对值） Optional&amp;lt;Integer&amp;gt; maxAbs = Arrays.stream(numbers).max(Comparator.comparingInt(Math::abs)); maxAbs.ifPresent(System.out::println); // 输出：9 或 -5取决于绝对值的比较 } } 其中Optional</description>
    </item>
    <item>
      <title>流操作和函数式编程</title>
      <link>http://localhost:1313/post/java/</link>
      <pubDate>Tue, 28 Mar 2023 11:08:00 +0000</pubDate>
      <guid>http://localhost:1313/post/java/</guid>
      <description>流操作 是Java 8中引入的一种数据处理模式，通常涉及数据的读取、写入、转换、过滤等，这些操作可以在数据流上连续进行，形成一条处理链。&#xA;例如：stream() 方法是 Java 8 引入的 Stream API 的一部分，它用于将集合（如数组、列表等）转换为流（Stream）。&#xA;例如：能用max()和min()对流操作找到流中的最大元素。&#xA;[参数:可用Comparator接口自定义比较的逻辑]&#xA;import java.util.Arrays; import java.util.Optional; import java.util.Comparator; public class StreamExample { public static void main(String[] args) { Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5}; // 使用默认比较器找到最大元素 Optional&amp;lt;Integer&amp;gt; max = Arrays.stream(numbers).max(); max.ifPresent(System.out::println); // 输出：9 // 使用默认比较器找到最小元素 Optional&amp;lt;Integer&amp;gt; min = Arrays.stream(numbers).min(); min.ifPresent(System.out::println); // 输出：1 // 使用自定义比较器找到最大元素（基于绝对值） Optional&amp;lt;Integer&amp;gt; maxAbs = Arrays.stream(numbers).max(Comparator.comparingInt(Math::abs)); maxAbs.ifPresent(System.out::println); // 输出：9 或 -5取决于绝对值的比较 } } 其中Optional</description>
    </item>
  </channel>
</rss>
