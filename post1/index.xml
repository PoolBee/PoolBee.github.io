<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post1s on PoolBee的博客</title>
    <link>http://localhost:1313/post1/</link>
    <description>Recent content in Post1s on PoolBee的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Jul 2024 21:14:39 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/post1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>随笔</title>
      <link>http://localhost:1313/post1/%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Fri, 19 Jul 2024 21:14:39 +0000</pubDate>
      <guid>http://localhost:1313/post1/%E9%9A%8F%E7%AC%94/</guid>
      <description>建站回顾 1. 域名 正在ICP备案,预计7个工作日后能拿到备案的域名。慢慢来吧&#xA;2. 服务器 腾讯云服务器，40G, 1M带宽，1核2G内存。&#xA;3. 博客框架 暂时用的Hugo，建站很快。&#xA;历程 框架选来选去，之前用过Hexo主题,但是时间过于久远。这次想在云服务器上运行，遂重新开始。框架从Hexo到Halo到Hugo。 原本在Linux上安装Hexo得心应手，但这次在CentOS7.6并不支持Nodejs8,支持不了最新的Hexo主题,又转为Halo， Halo苦于教程少啊,而且Hugo整体还是很方便,比较下来Hexo的教程&amp;gt;Hugo&amp;gt;Halo，最终确定了Hugo框架。 现在网站搭起来了，后续慢慢再更新文章~~。 </description>
    </item>
    <item>
      <title>OpenCV中对图像噪声处理的常用形态学操作</title>
      <link>http://localhost:1313/post1/opencv/</link>
      <pubDate>Mon, 06 Nov 2023 21:14:39 +0000</pubDate>
      <guid>http://localhost:1313/post1/opencv/</guid>
      <description>Typlog 的相册语法 介绍了图像处理中的形态学操作，以及如何使用OpenCV库来执行这些操作。括腐蚀、膨胀、开运算、闭运算、梯度运算、顶帽运算和黑帽运算。每种操作都有不同的效果和应用。&#xA;一、噪声处理的基本操作 1.腐蚀 让图像沿着自己边界向内收缩，OpenCV通过核（kernel）来实现收缩计算。&#xA;在形态学中，可以理解为由N个像素组成的像素块，（每一个像素块，包含一个核（kernel））在图像的边缘移动，移动的过程中，核将会在图像的边缘抹除图像和核（kernel）重合但又没有越过核心（kernel）的像素点抹除。&#xD;例子一、消除仙人掌的刺 import cv2 import numpy as np img =cv2.imread(r&amp;#34;D:\Program Files (x86)\PyCharmProject\pythonProject\video-face\xtz.png&amp;#34;) k=np.ones((3,3),np.uint8)#3*3矩阵定义核的大小 cv2.imshow( &amp;#34;img&amp;#34;,img) dst=cv2.erode(img,k)#腐蚀 cv2.imshow(&amp;#34;dst&amp;#34;,dst) cv2.waitKey() cv2.destroyAllwindows( ) dst=cv2.erode(src,kernel,anchor,iterations,borderType,borderValue) 参数说明: src原始图像 kernel腐蚀使用的核 anchor可选参数 核的锚点位置 iterations可选参数 腐蚀操作的迭代次数，默认值为1，后面两个参数建议采用默认&#xA;2.膨胀 膨胀操作与腐蚀操作相反，膨胀操作可以让图像沿着自己的边界向内扩张。&#xD;同样是通过核来计，当核在图像的边缘移动时，核会将图像边缘填补新的像素&#xD;import cv2 import numpy as np img=cv2.imread(r&amp;#34;D:\Program Files (x86)\PyCharmProject\pythonProject\video-face\xtz.png&amp;#34;) k=np.ones((9,9),np.uint8) cv2.imshow( &amp;#34;img&amp;#34;,img) dst=cv2.dilate(img, k) cv2.imshow( &amp;#34;dst&amp;#34;,dst) cv2.waitKey() cv2.destroyAllwindows() ```Python dst=cv2.dilate(src,kernel,anchor,iterations,borderType,borderValue)\ 参数说明如下&#xA;src原始图像 kernel膨胀使用的核 anchor可选参数核的锚点位置 iterations可选参数膨胀操作的迭代次数 后面两个为可选参数建议取默认值&#xA;膨胀可以产生一种“近视眼”的效果。&#xA;3.开运算 开运算是将图像先进行腐蚀操作，再进行膨胀操作。&#xD;开运算可以用来抹除图像外部的细节。&#xA;#开运算 import cv2 import numpy as np img=cv2.</description>
    </item>
    <item>
      <title>流操作和函数式编程</title>
      <link>http://localhost:1313/post1/java/</link>
      <pubDate>Tue, 28 Mar 2023 11:08:00 +0000</pubDate>
      <guid>http://localhost:1313/post1/java/</guid>
      <description>流操作 是Java 8中引入的一种数据处理模式，通常涉及数据的读取、写入、转换、过滤等，这些操作可以在数据流上连续进行，形成一条处理链。&#xA;例如：stream() 方法是 Java 8 引入的 Stream API 的一部分，它用于将集合（如数组、列表等）转换为流（Stream）。&#xA;例如：能用max()和min()对流操作找到流中的最大元素。&#xA;[参数:可用Comparator接口自定义比较的逻辑]&#xA;import java.util.Arrays; import java.util.Optional; import java.util.Comparator; public class StreamExample { public static void main(String[] args) { Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5}; // 使用默认比较器找到最大元素 Optional&amp;lt;Integer&amp;gt; max = Arrays.stream(numbers).max(); max.ifPresent(System.out::println); // 输出：9 // 使用默认比较器找到最小元素 Optional&amp;lt;Integer&amp;gt; min = Arrays.stream(numbers).min(); min.ifPresent(System.out::println); // 输出：1 // 使用自定义比较器找到最大元素（基于绝对值） Optional&amp;lt;Integer&amp;gt; maxAbs = Arrays.stream(numbers).max(Comparator.comparingInt(Math::abs)); maxAbs.ifPresent(System.out::println); // 输出：9 或 -5取决于绝对值的比较 } } 其中Optional</description>
    </item>
  </channel>
</rss>
