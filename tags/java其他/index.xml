<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java其他 on PoolBee的博客</title>
    <link>http://localhost:1313/tags/java%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in Java其他 on PoolBee的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 28 Mar 2023 11:08:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>流操作和函数式编程</title>
      <link>http://localhost:1313/post1/java/</link>
      <pubDate>Tue, 28 Mar 2023 11:08:00 +0000</pubDate>
      <guid>http://localhost:1313/post1/java/</guid>
      <description>流操作 是Java 8中引入的一种数据处理模式，通常涉及数据的读取、写入、转换、过滤等，这些操作可以在数据流上连续进行，形成一条处理链。&#xA;例如：stream() 方法是 Java 8 引入的 Stream API 的一部分，它用于将集合（如数组、列表等）转换为流（Stream）。&#xA;例如：能用max()和min()对流操作找到流中的最大元素。&#xA;[参数:可用Comparator接口自定义比较的逻辑]&#xA;import java.util.Arrays; import java.util.Optional; import java.util.Comparator; public class StreamExample { public static void main(String[] args) { Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5}; // 使用默认比较器找到最大元素 Optional&amp;lt;Integer&amp;gt; max = Arrays.stream(numbers).max(); max.ifPresent(System.out::println); // 输出：9 // 使用默认比较器找到最小元素 Optional&amp;lt;Integer&amp;gt; min = Arrays.stream(numbers).min(); min.ifPresent(System.out::println); // 输出：1 // 使用自定义比较器找到最大元素（基于绝对值） Optional&amp;lt;Integer&amp;gt; maxAbs = Arrays.stream(numbers).max(Comparator.comparingInt(Math::abs)); maxAbs.ifPresent(System.out::println); // 输出：9 或 -5取决于绝对值的比较 } } 其中Optional</description>
    </item>
    <item>
      <title>流操作和函数式编程</title>
      <link>http://localhost:1313/post/java/</link>
      <pubDate>Tue, 28 Mar 2023 11:08:00 +0000</pubDate>
      <guid>http://localhost:1313/post/java/</guid>
      <description>流操作 是Java 8中引入的一种数据处理模式，通常涉及数据的读取、写入、转换、过滤等，这些操作可以在数据流上连续进行，形成一条处理链。&#xA;例如：stream() 方法是 Java 8 引入的 Stream API 的一部分，它用于将集合（如数组、列表等）转换为流（Stream）。&#xA;例如：能用max()和min()对流操作找到流中的最大元素。&#xA;[参数:可用Comparator接口自定义比较的逻辑]&#xA;import java.util.Arrays; import java.util.Optional; import java.util.Comparator; public class StreamExample { public static void main(String[] args) { Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5}; // 使用默认比较器找到最大元素 Optional&amp;lt;Integer&amp;gt; max = Arrays.stream(numbers).max(); max.ifPresent(System.out::println); // 输出：9 // 使用默认比较器找到最小元素 Optional&amp;lt;Integer&amp;gt; min = Arrays.stream(numbers).min(); min.ifPresent(System.out::println); // 输出：1 // 使用自定义比较器找到最大元素（基于绝对值） Optional&amp;lt;Integer&amp;gt; maxAbs = Arrays.stream(numbers).max(Comparator.comparingInt(Math::abs)); maxAbs.ifPresent(System.out::println); // 输出：9 或 -5取决于绝对值的比较 } } 其中Optional</description>
    </item>
  </channel>
</rss>
