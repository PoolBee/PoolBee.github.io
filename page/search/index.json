[{"content":"Echarts使用方法： 官方教程：https://echarts.apache.org/handbook/zh/get-started/\n1.首先要提供一个容器，并给定大小 例如：\n\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; .box{ width: 300px; height: 300px; background-color: rgb(188, 227, 236); } \u0026lt;/style\u0026gt; 2.引入需要的js地图文件，一般是而echart.js和一个地图js文件 (1)本地js文件引入 \u0026lt;script src=\u0026#34;/XXX/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/XXX/china.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 引入即可\n但echart官网已经挂了，不提供地图js文件。自行网上查阅吧~\n(2)CDN引入 \u0026lt;!-- \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/echarts@latest/dist/echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;china.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; 注意：如果用npm等包管理器安装过了echart，然后用webpack打包了。那么在中可以使用import语句进行引入\n// import * as echarts from \u0026#39;echarts\u0026#39;; 3.实例化echarts对象 \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; var myChart = echarts.init(document.querySelector(\u0026#34;.box\u0026#34;)); 4.指定配置项和数据 var option = { title: { text: \u0026#39;ECharts 入门示例\u0026#39; }, tooltip: {}, legend: { data:[\u0026#39;销量\u0026#39;] }, xAxis: { data: [\u0026#34;衬衫\u0026#34;,\u0026#34;羊毛衫\u0026#34;,\u0026#34;雪纺衫\u0026#34;,\u0026#34;裤子\u0026#34;,\u0026#34;高跟鞋\u0026#34;,\u0026#34;袜子\u0026#34;] }, yAxis: {}, series: [{ name: \u0026#39;销量\u0026#39;, type: \u0026#39;bar\u0026#39;, data: [5, 20, 36, 10, 10, 20] }] }; 5.将配置项设置给echarts实例对象，使用刚指定的配置项和数据显示图表 myChart.setOption(option); 完整代码 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document01\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 300px; height: 300px; background-color: rgb(188, 227, 236); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- 1..准备具有大小的DOM容器 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;!-- 2.方法一 、直接写路径--\u0026gt; \u0026lt;!-- 2.方法二、CDN引入--\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script src=\u0026#34;echarts.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // import * as echarts from \u0026#39;echarts\u0026#39;;不行 //3.初始化实例对象 echarts.init(dom容器) var myChart = echarts.init(document.querySelector(\u0026#34;.box\u0026#34;)); //4.指定配置项和数据 var option = { title: { text: \u0026#39;ECharts 入门示例\u0026#39; }, tooltip: {}, legend: { data:[\u0026#39;销量\u0026#39;] }, xAxis: { data: [\u0026#34;衬衫\u0026#34;,\u0026#34;羊毛衫\u0026#34;,\u0026#34;雪纺衫\u0026#34;,\u0026#34;裤子\u0026#34;,\u0026#34;高跟鞋\u0026#34;,\u0026#34;袜子\u0026#34;] }, yAxis: {}, series: [{ name: \u0026#39;销量\u0026#39;, type: \u0026#39;bar\u0026#39;, data: [5, 20, 36, 10, 10, 20] }] }; //5.将配置项设置给echarts实例对象，使用刚指定的配置项和数据显示图表。 myChart.setOption(option); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 常见问题 1.下载地图.js文件，自行google。 2.下载的地图文件的GeoJSON 数据为乱码 地图文件的GeoJSON 乱码解决方法： DataV.GeoAtlas\n添加在对应的Geojson即可。 ","date":"2024-07-25T23:50:28Z","image":"http://localhost:1313/post/cover/plugin_cover.jpg","permalink":"http://localhost:1313/post/%E5%BB%BA%E7%AB%992024.07.26-2/","title":"Echart使用及常见问题"},{"content":"​\n这几天逛了很多博客，找到了十年之约 (foreverblog.cn)、博客广场 - 博友圈 · 博客人的朋友圈！ (boyouquan.com)等博客交流圈子，等我慢慢写博客，然后域名备案下来了，提交申请吧~ 一、新增博客背景虚化图片 ​\t这个很简单，在assets\\scss\\custom.scss中对body选择器声明块中增加，背景图片即可。\n如果要点击暗色模式的时候，切换背景虚化的颜色。那么需要在为暗色模式的click事件中增加背景虚化的类。\n\\主题文件夹\\public\\ts\\main.ts中\n首先在CSS: 使用 .dark-mode 类在暗色模式下应用黑色毛玻璃效果。\nbody { background-image: url(\u0026#39;/page/nav-img/background4.jpg\u0026#39;); background-size: cover; background-attachment: fixed; position: relative; transition: background-color 0.3s ease; } body::after { content: \u0026#39;\u0026#39;; position: absolute; top: 0; left: 0; right: 0; bottom: 0; /* 白色模式下的样式 */ background: rgba(176, 176, 176, 0.595); /* 黑色半透明 */ backdrop-filter: blur(10px); /* 毛玻璃效果 */ z-index: -1; // transition: background 0.3s ease, backdrop-filter 0.3s ease; /* 平滑过渡效果 */ } /* 暗色模式下的样式 */ body.dark-mode::after { background: rgba(158, 157, 157, 0.5); /* 更强的黑色半透明毛玻璃效果 */ 其次main.ts的JS中: 切换 dark-mode 类以应用新的样式。\nmain.ts // 初始化颜色方案切换器 const colorSchemeToggler = new colorScheme_default(document.getElementById(\u0026#34;dark-mode-toggle\u0026#34;)); // 为暗色模式切换按钮添加事件监听器 const darkModeToggleButton = document.getElementById(\u0026#34;dark-mode-toggle\u0026#34;); if (darkModeToggleButton) { darkModeToggleButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { // 切换 body 上的 \u0026#39;dark-mode\u0026#39; 类，切换到暗色模式 document.body.classList.toggle(\u0026#34;dark-mode\u0026#34;); }); } } }; 实现效果。\n二、新增导航栏及Home、关于我、走走停停板块 (1)导航栏 1.创建导航栏的html layouts/partials 文件夹中创建一个新的部分文件 我创建在了\\hugo-theme-stack-3.26.0\\layouts\\partials\\navbar目录下的navbar.html\n\u0026lt;!-- layouts/partials/navbar.html --\u0026gt; \u0026lt;nav class=\u0026#34;navbar--fixed-top\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34; class=\u0026#34;navbar-brand\u0026#34;\u0026gt;Logo\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/about\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/contact\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; 2.在Hugo主模板中包含导航栏 修改_default目录下的baseof.html，这个文件是Hugo主题的模板文件，可以用go自己设计模板。\n要包含navbar.html即可\n\\hugo-theme-stack-3.26.0\\layouts\\_default\\baseof.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;{{ .Site.LanguageCode }}\u0026#34; dir=\u0026#34;{{ default `ltr` .Language.LanguageDirection }}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{- partial \u0026#34;head/head.html\u0026#34; . -}} {{- block \u0026#34;head\u0026#34; . -}}{{ end }} \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;{{ block `body-class` . }}{{ end }}\u0026#34;\u0026gt; {{- partial \u0026#34;head/colorScheme\u0026#34; . -}} \u0026lt;!-- 导航栏的html文件包含 --\u0026gt; {{ partial \u0026#34;navbar/navbar.html\u0026#34; . }} \u0026lt;!-- 包含导航栏 --\u0026gt; {{/* The container is wider when there\u0026#39;s any activated widget */}} {{- $hasWidget := false -}} {{- range .Site.Params.widgets -}} {{- if gt (len .) 0 -}} {{- $hasWidget = true -}} {{- end -}} {{- end -}} \u0026lt;div class=\u0026#34;container main-container flex on-phone--column {{ if $hasWidget }}extended{{ else }}compact{{ end }}\u0026#34;\u0026gt; {{- block \u0026#34;left-sidebar\u0026#34; . -}} {{ partial \u0026#34;sidebar/left.html\u0026#34; . }} {{- end -}} {{- block \u0026#34;right-sidebar\u0026#34; . -}}{{ end }} \u0026lt;main class=\u0026#34;main full-width\u0026#34;\u0026gt; {{- block \u0026#34;main\u0026#34; . }}{{- end }} \u0026lt;/main\u0026gt; \u0026lt;/div\u0026gt; {{ partial \u0026#34;footer/include.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 3.为导航栏的html增加css样式 我放在了\\hugo-theme-stack-3.26.0\\assets\\scss\\partials的navbar.scss中\n/* assets/css/styles.css */ .navbar--fixed-top { position: sticky; top: 0; z-index: var(--ifm-z-index-fixed); background-color: white; /* 你可以根据需要添加其他样式 */ box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); padding: 10px 0; } .navbar-nav { list-style: none; display: flex; gap: 20px; } .nav-item { display: inline; } .nav-link { text-decoration: none; color: black; } .navbar-brand { font-size: 1.5em; font-weight: bold; } 4.在head.html文件下确保css被正确引用 theme-stack-3.26.0\\layouts\\partials\\head\\head.html中\n\u0026lt;meta charset=\u0026#39;utf-8\u0026#39;\u0026gt; \u0026lt;meta name=\u0026#39;viewport\u0026#39; content=\u0026#39;width=device-width, initial-scale=1\u0026#39;\u0026gt; {{- $description := partialCached \u0026#34;data/description\u0026#34; . .RelPermalink -}} \u0026lt;meta name=\u0026#39;description\u0026#39; {{ printf \u0026#34;content=%q\u0026#34; $description | safeHTMLAttr }}\u0026gt; {{ with .Params.Keywords }}\u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{{ delimit . \u0026#34;, \u0026#34; }}\u0026#34;\u0026gt;{{ end }} {{- $title := partial \u0026#34;data/title\u0026#34; . -}} \u0026lt;title\u0026gt;{{ $title }}\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#39;canonical\u0026#39; href=\u0026#39;{{ .Permalink }}\u0026#39;\u0026gt; \u0026lt;!-- navbar的css引用 --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ \u0026#34;/scss/partials/navbar.scss\u0026#34; | relURL }}\u0026#34;\u0026gt; \u0026lt;!-- 添加CSS文件引用 --\u0026gt; {{- partial \u0026#34;head/style.html\u0026#34; . -}} {{- partial \u0026#34;head/script.html\u0026#34; . -}} {{- partial \u0026#34;head/opengraph/include.html\u0026#34; . -}} {{- range .AlternativeOutputFormats -}} \u0026lt;link rel=\u0026#34;{{ .Rel }}\u0026#34; type=\u0026#34;{{ .MediaType.Type }}\u0026#34; href=\u0026#34;{{ .Permalink | safeURL }}\u0026#34;\u0026gt; {{- end -}} {{ with .Site.Params.favicon }} \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;{{ . | relURL }}\u0026#34; /\u0026gt; {{ end }} {{- template \u0026#34;_internal/google_analytics.html\u0026#34; . -}} {{- partial \u0026#34;head/custom.html\u0026#34; . -}} \u0026lt;!-- busuanzi --\u0026gt; {{- if .Site.Params.busuanzi.enable -}} \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; {{- end -}} 5.然后在style.scss中增加scss引用 /*! * Hugo Theme Stack * * @author: Jimmy Cai * @website: https://jimmycai.com * @link: https://github.com/CaiJimmy/hugo-theme-stack 这个 SCSS 文件作为一个主文件，起到将所有相关样式文件引入到一个地方的作用。 它确保项目中的样式文件能够被组织和管理，使得最终生成的 CSS 文件包含了所有必要的样式定义。 这种结构化的样式管理方式有助于保持代码的清晰和模块化。 */ @import \u0026#34;breakpoints.scss\u0026#34;; @import \u0026#34;variables.scss\u0026#34;; @import \u0026#34;grid.scss\u0026#34;; @import \u0026#34;external/normalize.scss\u0026#34;; @import \u0026#34;partials/menu.scss\u0026#34;; @import \u0026#34;partials/article.scss\u0026#34;; @import \u0026#34;partials/widgets.scss\u0026#34;; @import \u0026#34;partials/footer.scss\u0026#34;; @import \u0026#34;partials/pagination.scss\u0026#34;; @import \u0026#34;partials/sidebar.scss\u0026#34;; @import \u0026#34;partials/base.scss\u0026#34;; @import \u0026#34;partials/layout/article.scss\u0026#34;; @import \u0026#34;partials/layout/list.scss\u0026#34;; @import \u0026#34;partials/layout/404.scss\u0026#34;; @import \u0026#34;partials/layout/search.scss\u0026#34;; @import \u0026#34;general.scss\u0026#34;; @import \u0026#34;custom.scss\u0026#34;; // narbar @import \u0026#34;partials/navbar.scss\u0026#34; 这就可以增加导航栏了。\n(2)关于我 定位到acrchives的.md文件。navbar的html中设置a标签href跳转即可。 md文件的layout设置为已经存在的layout文件，我使用的是archives的layout文件。 (3)走走停停 1.使用Apache ECharts创建地图 一个基于 JavaScript 的开源可视化图表库Apache ECharts\n三、走走停停板块的设置 pb主题\\content\\page\\daily_info中的index.md\nlayout自定义了daily_info的Hugo模块\n\\hugo-theme-stack-3.26.0\\layouts\\partials\\map中创建了index4.html设置了地图及时间轴\n\\hugo-theme-stack-3.26.0\\layouts_default中创建了daily_info.html自定义了模板，引入了index4.index（archives.html也默认再此设置的）\n","date":"2024-07-25T22:14:28Z","image":"http://localhost:1313/post/cover/stack-logo-128.png","permalink":"http://localhost:1313/post/%E5%BB%BA%E7%AB%992024.07.26-1/","title":"Hugo主题配置记录-7月26日博客更新日志"},{"content":"解决了一些小问题，之前建站留下的小问题\n一、左侧栏的正确跳转 点击图标后跳转到链接栏中有二维码\nconfig.yaml中修改跳转链接到/post/link即可\n点击\u0026quot;链接\u0026quot;后出现二维码\n二、文章图片的正确插入 1.文章封面图片 \\content\\post中的文章 ##Front Matter图片插入记得要添加/post/路径 例如： image: /post/123.png\n--- title: 文章标题 date: 2024-07-23 10:00:00 tags: - 标签1 - 标签2 categories: - 分类1 - 分类2 #这里的就是文章封面图片 image: /post/stack-logo-128.png --- 这里注意\\content\\page\\中的文章\n在文章内部的时候，\n![图片](123.jpg)不需要添加/post/路径\n2.文章内部图片 \\content\\post\\中需要添加多个图片\n可以放入文件夹中，避免多个md文件和多个图片堆在一起。【注意：可以不写明在哪个文件夹，直接写/post/文件名即可】\n例如：![image-20240607184445492](/post/123.png)\n![image-20240607184336146](/post/文件夹/123.png)这样详细写明最好，实现图片的插入。\n其实在/post目录中用/post/123.png这样的方式，会自动搜寻/post目录下的123.png文件，（自我理解）所以不用写明中间的/before文件夹。\n最后：\nFront Matter中的links项的路径也一样需要加post，从post路径开始必须指定路径清晰到文件 links: \\- title: Bilibili description: bilibili是国内知名的视频弹幕网站,这里有及时的动漫新番,活跃的ACG氛围,有创意的Up主。大家可以在这里找到许多欢乐。 website: https://www.bilibili.com/ image: /post/logo/Bilibili_Logo_Blue.svg ","date":"2024-07-22T15:41:48Z","image":"http://localhost:1313/post/cover/stack-logo-128.png","permalink":"http://localhost:1313/post/%E5%BB%BA%E7%AB%992024.07.23/","title":"Hugo主题配置记录-7月23日博客更新日志"},{"content":"Hugo主题配置记录 1.引入busuanzi插件进行字数、访问量统计。 \\layouts\\partials\\footer\nfooter文件中\n增加以下代码\n\u0026lt;!-- 卜算子统计信息 --\u0026gt; \u0026lt;section class=\u0026#34;count_info\u0026#34;\u0026gt; \u0026lt;!-- 1运行时间 --\u0026gt; \u0026lt;div\u0026gt; {{ T \u0026#34;footer.runtime1\u0026#34; }} \u0026lt;span id=\u0026#34;ds\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime2\u0026#34; }} \u0026lt;span id=\u0026#34;hs\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime3\u0026#34; }} \u0026lt;span id=\u0026#34;ms\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime4\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;!-- 2文章个数和字数 --\u0026gt; \u0026lt;div\u0026gt; {{ $scratch := newScratch }} {{ range (where .Site.Pages \u0026#34;Kind\u0026#34; \u0026#34;page\u0026#34;) }} {{ $scratch.Add \u0026#34;total\u0026#34; .WordCount }} {{ end }} \u0026lt;!-- 转换为整数 --\u0026gt; {{ $total := $scratch.Get \u0026#34;total\u0026#34; | int }} \u0026lt;!-- 转换为浮点数 --\u0026gt; {{ $totalFloat := $total | float }} {{ T \u0026#34;footer.count1\u0026#34; }} {{ len (where .Site.RegularPages \u0026#34;Section\u0026#34; \u0026#34;post\u0026#34;) }} {{ T \u0026#34;footer.count2\u0026#34; }} {{ div $totalFloat 1000.0 | lang.FormatNumber 2 }} k {{ T \u0026#34;footer.count3\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;!-- 3本站访问量 --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt;{{ T \u0026#34;footer.pv1\u0026#34; }}\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;{{ T \u0026#34;footer.pv2\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 卜算子js脚本 --\u0026gt; \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; (1)运行时间 \u0026lt;!-- 1运行时间 --\u0026gt; \u0026lt;div\u0026gt; {{ T \u0026#34;footer.runtime1\u0026#34; }} \u0026lt;span id=\u0026#34;ds\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime2\u0026#34; }} \u0026lt;span id=\u0026#34;hs\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime3\u0026#34; }} \u0026lt;span id=\u0026#34;ms\u0026#34; class=\u0026#34;running-days\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; {{ T \u0026#34;footer.runtime4\u0026#34; }} \u0026lt;/div\u0026gt; (2)文章个数和字数 使用 Hugo 的Scratch 存储器计算总字数。range (where .Site.Pages \u0026ldquo;Kind\u0026rdquo; \u0026ldquo;page\u0026rdquo;)遍历所有页面类型为 page 的页面。\n{{ $scratch.Add \u0026ldquo;total\u0026rdquo; .WordCount }} 将每个页面的字数累加到total。转化为整数和浮点数，\n{{ len (where .Site.RegularPages \u0026ldquo;Section\u0026rdquo; \u0026ldquo;post\u0026rdquo;) }}计算文章数量。\n{{ div $totalFloat 1000.0 | lang.FormatNumber 2 }} k将总字数除以 1000 格式化为两位小数。\nHugo 的T函数插入翻译文本\n(3)本站访问量 使用js脚本\n不蒜子 - 极简网页计数器 (ibruce.info)\n复制js代码即可。\n2.删除网站语言切换 config.yaml中删除默认语言设置\n主题最新的配置文件可以在 exampleSite/config.yaml\n配置主题 | Hugo 主题 Stack (stack-docs.netlify.app)\n\u0026lt;--删除自己的配置即可--\u0026gt; 3.更改社交图标样式、间距 \\assets\\scss\\custom.scss\n中修改即可\n.menu-social{ gap: 15px; margin-top: 25px; } 4.增加返回顶部按钮、样式替换 \\layouts\\partials\\widget\n增加如下代码\n{{ $topImg := resources.Get (\u0026#34;icons/back-to-top.svg\u0026#34;) }} \u0026lt;a id=\u0026#34;back-to-top\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt; {{$topImg.Content | safeHTML}} \u0026lt;/a\u0026gt; resources.Get获取svg文件到$topImg\na标签属性链接href=\u0026quot;#\u0026ldquo;实现返回顶部，插入svg内容进行渲染。\n\\assets\\scss\\custom.scss $hover: 0.2s ease-in-out; #back-to-top { position: fixed; margin-left: 150px; bottom: 60px; display: none; border: 0; transition: transform $hover; \u0026amp;:hover { transform: translateY(-10px); } } ease-in-out过渡，#back-to-top 定义了 ID 为 back-to-top 的元素的样式规则。\n\\assets\\icons iconfont-阿里巴巴矢量图标库 下载svg格式的图标，然后记住颜色代码，编辑搜索将颜色代码替换为currentColor就能实现颜色随暗色模式切换变化。\n链接： ","date":"2024-07-20T20:01:49Z","image":"http://localhost:1313/post/cover/stack-logo-128.png","permalink":"http://localhost:1313/post/%E5%BB%BA%E7%AB%992024.07.21/","title":"Hugo主题配置记录-7月21日博客更新日志"},{"content":"Hugo主题配置记录\n建站回顾 1. 域名 正在ICP备案,预计7个工作日后能拿到备案的域名。慢慢来吧1111\n2. 服务器 腾讯云服务器，40G, 1M带宽，1核2G内存。\n3. 博客框架 暂时用的Hugo，建站很快。\n历程 框架选来选去，之前用过Hexo主题,但是时间过于久远。这次想在云服务器上运行，遂重新开始。框架从Hexo到Halo到Hugo。 原本在Linux上安装Hexo得心应手，但这次在CentOS7.6并不支持Nodejs8,支持不了最新的Hexo主题,又转为Halo， Halo苦于教程少啊,而且Hugo整体还是很方便,比较下来Hexo的教程\u0026gt;Hugo\u0026gt;Halo，最终确定了Hugo框架。 现在网站搭起来了，后续慢慢再更新文章~~。 ","date":"2024-07-19T21:14:39Z","permalink":"http://localhost:1313/post/%E9%9A%8F%E7%AC%94/","title":"随笔"},{"content":"\ncheck point 就是菜单——选择不同的模型\nlora更精确的人物或画风，更可控\n图生图\n上传\n描述图片\nAI摄影\nlora炼丹\n七天免费试用领取\n聚焦剪裁、中央剪裁、无需剪裁、\n使用deepbooru算法反推标注。0.6 系数越小越精细\n日志看loss值，数值降低大概率没什么问题\n一、提示词prompt 类别\n其他提示词：画质等\n但是真实系的操作是更依赖真实的模型\n1.prompt模板: 具体的直接使用即可 2.提示词权重分配 增强减弱(){}\t[] 安全范围1+-0.5，单个的\n():1.1倍，1.331倍\n{}\n[1]进阶语法-坑 不想出现就是负向提示词 单色风格的画作\n3.采样迭代步数 加噪点——去除噪点\n闪一次，就步数\u0026gt;20后意义不大\n最低不要低于10\n采样方法 带有++号的是改进的算法，最好使用比较稳定。\n分辨率过高容易出现多人，多手。\n一般低分辨率绘制，然后hires fix 来放大 高清修复、 面部修复、平铺/分块：生成无缝贴满整个屏幕的纹理性图片的；一般不用\n7-12相关性一般\n批次和数量\n批次是格子预览图。每次批次数量不宜过高，容易爆显存。\n4.写提示词方法 1.翻译、描述确切场景，然后直接让词组翻译为英文 2.功能插件、翻译的插件——国内有——SD也有 3.更好书写提示词网站：AI词汇加速器 提示词网站：\n二次元和亚洲面孔多：\n人物、\n画风、质感：\n二、图生图 原理：原本提醒上记录的像素信息会在加噪和去噪的过程中、被作为一种特征反应到生成的图片上。\n1.上传图片、导入到SD里 2.提示词书写 1man,1girl\n3.参数设置 重绘幅度0.6-0.8\n分辨率设置，原始尺寸一样最好\n按长宽比例一致生成、\n[1]随机种子 xxx in backgroud\n景深depth of field\n如果要保留生成的原本的元素的样子，只改动背景，不改动人物风格呢？ 同一个随机种子、同一套随机种子、 骰子：-1是随机，循环按钮是上一次的种子。\n图库浏览器中以前生成的图片，里面有种子。\n种子加上+需要的背景提示词。 不像人物的物品的拟人化、静物或者墙角的旮旯来想象。——抖音评论区中有 [2]图生图的风格迁移： 游戏中的卡通形象到真实的现实中、可以输入提示词、更加精确的需要lora模型。\n[3]photoshop中搭建图像框架+SD生成图片——炫酷的效果。 画布\n画图中\n然后场景插画就完成了！ 三、画风 1.Checkpoint 模型信息：\n下载的模型放入这里就能加载。\n所以就叫关键点、存档。\n所以这些检查点，这些模型就能有迭代、更新的能力，AOM3A3深橘色。\n2. .ckpt文件 几个G的叫大模型\n3. .safetensors 训练者让模型更加可靠高效来使用的一种格式。\n点击刷星按钮\n命令行中跳出提示才算成功\n秋叶的启动器能对管理下载\n4. VAE VAE选项[变分自解码器Variational Autp Encoder] 负责将加噪后的潜空间数据转化为正常图像。\nAI绘图的调色滤镜，直接表现是影响色彩质感。—— 一般checkpoint里包含了VAE但是也有没有到——图片会发灰，发白\n会推荐使用一些VAE\n也有适用于大多数checkpoint的VAE：kl-f8-anime2.ckpt\n也有safetensors的VAE\n[1]自动的适配VAE方法 改为和模型一样的名字\n三-进阶 {1}Hypernetwork超网络模型 画面微调\n作用：和Lora差不多的，也可以让AI学习一些原本不存在它世界里的东西，\n不像Lora是彩卡插画。那么它像一张小名片\nHypernetwork一般用于改善画面的整体风格 这种画风区别：不是二次元真实感那种区别，而像梵高和莫奈那种小区别 hYPERNETwORK路径\n绕：设置中找到附加网络\n在这里也可以添加Lora,【坑】但是Lora会有更方便的应用形式 正方形、就可以得到Q版\n多数研究者对于Hypernetwork在图像生成方面的评价并不好，\n至少不如lora和embaddings好，\n也有部分Lora对训练样本的把控实现了对画风的塑造植入。\n尽管如此，超网络在实现特定的风格时，仍然会提供不少的帮助\n{2}embeddings嵌入式向量 优化画风\n.pt\n翻译为：文本嵌入\n有时候网站上叫Textual Inversion文本倒置\n很小的文件——相当于大模型中的书签，指向特定的形象——嵌入式向量 与VAE一样\n使用：只要在输入中输入书签翻字典的过程。 举例： 固定随机种子+embadding的固定咒语——\n更像D.VA——加入描述她身上本身有的东西\n[1]技巧反推提示词 Dva的一张图片导入_图生图\n识别东西，然后转化为AI中的东西DB更具优势。\n每次识别的再筛选——删除降低权重\n**生成图片不可能完全一致，**因为embeddings到头是个几十kb的小文件 只是按图索骥而已。\n所以embaddings适用于一些广泛、容错率高的形象的概念，表现会好很多。 而特定的人物更多的用Lora [坑]CharTurner-embaddings三视图 真NB啊\n使用方法： Eva的和charturner两个embaddings使用——化学反应自己观察 开启高清修复\n[2]embaddings解决手等的问题 只要避开错误案例就可以了 EasyNegative\n放入负面提示词里\n就修复了\n综合的、全方位的基于负面样本的提炼\n灰度，多人、等等\n{3}LoRa 低秩适应模型 固定特定人物角色特征\n作用：有助于向Ai传递/描述某一个特征准确/主体清晰的形象 夹在书中的彩页100-200M\n各方各个方面的素材、角度、画风等\n有些模型会提供触发提示词——训练过程中有基于这个提示词反复强化过AI认知\n也可以加入进行强化效果\n[1]lora会出现一些小问题 因为它的训练图源复杂、\n所以一般也会对画风进行影响\n权重减小\n[坑-深入]有专门为Lora的插件应用。 5.模型下载渠道 midjourney的提供的模型数量有限 默认的模型也能实现挺好的效果，\nSD官方也有1.4、2.0等开源模型 官方的炉在版权和尺度有限制 0.个人训练发布并分享的模型 大多数是“私炉模型” 1.Hugging face使用方法 允许用户共享AI学习模型和数据集的平台\n搜索栏中搜索stable diffusion中可以下载 筛选栏中可以找到\nWaifuDiffusion Anything DreamShop files and version中看源代码 - 大模型在Safey_checker找 - vae就在vae中找 community可以交流 2.C站 iativic.com\n不注册可使用，火热的模型\ntrained的模型 根据图像一点点训练出来的，一手的丹。\nMerged融合模型 几个模型融合到一起创造出来的。一般叫xxxMIx\n【坑】Base model 模型训练过程中的底模\n四、模型的类目及推荐 1.漫画/插画风：二次元 Anything、Counterfeit、Dreamlike Diffusion等 2.真实系 Deliberate、Realistic Vision、LOFI等 3.2.5D风 NeverEnding Dream、Protogen、国风V3 \u0026mdash;- 质感类似于建模软件出来的三维渲染图，不如平面那么平，也不如真实那么真。\n很接近一些游戏和3D动画的想象\nCounterfeit 细节感、精致感、各种复杂室内外场景\nDreamlike Diffusion 漫画插画风\n幻想的超现实魔幻作品\nDeliberate 真实系的,自由度非常高\nRealistic Vision 朴素踏实、有整活空间的写实模型。\n事物、动物图片等\nLOFI-融合模型 人物面部处理精致\nNED模型 造人的方面有一股特殊\nProtogen 国风3\n结合其他lora模型能创作\n4.小类模型 魔幻感场景\n现代建筑 高级感的平面设计\n高清 1.Hi-Res Fix 高清修复/高分辨率修复/\n皮肤分辨率太低人物皮肤模糊、人物面部不真实—— 如果用大分辨率的会有缺点 1.采样次数： 高清修复需要经过一次重绘、因此需要设置采样步数、保持默认0数值、它会和我们设置的采样次数(20)一致\n高清修勾，无法突破显存限制。\n[1]低分抽卡+固定种子+高清修复\n加戏，降低重绘幅度可以消除。\n繁纷复杂的花、多出的戒指等等\n只是高清：0.3-0.5即可\n0.5-0.7——AI重绘空间\n2.放大算法 感觉差不多，没有大到感觉很多区别\n带有GAN的算法，重绘的细节保留更加准确\n同行无脑方法\n无脑R-ESRGAN 4x+\n二次元第二个\n看模型的制作者推荐、或者自己试试。\n小技巧-简便高清方法 图库浏览器中，点击已经号的图片，再点击图生图。\n会自动填写信息\n3.放大算法设置 设置-放大-图生图算法设置\n2.Upscale放大脚本_SD放大 简便方法-\n图块重叠像素64——起到四张图片融合的缓冲带的作用\n高度-宽度分别增加64，\n然后开始。\n画面会混乱\n[1]如果脸在切割的地方 -降低重绘幅度-增大图块重叠度\n3.附加功能放大 人工智能算法修复\n一般成品的算法修复\n也可以不选Upscaler 2\n[2 [坑]下面的三个比较复杂 局部重绘 1.随机种子+咒语修改的问题\n即使随机种子一致，但是咒语还是修改了，出现了画面不可控的样子\n所以会有，不同姿势等问题\n如果是已经经过了高清修复和放大，那么要耗费的时间就更长了\n99%都是满意的，1% 直接点击-局部重绘，其他素材图片也可以 修改咒语+重绘幅度修改\n会出现笔尖，涂抹好重绘区域\n下方参数设置\n重绘过程：整个图片经历了重新加噪然后去噪的过程。\n眼睛部分被强调了，最后的效果是只针对这个区域的重绘了\n局部修复参数 1.蒙版： 可以写填充\n【坑】潜变量噪声、潜变量数值零 简答说：图生图的过程进一步复杂化、加入加噪、去噪的过程。\n理论上对图像的改变会更显著\n2.全图、3.仅蒙版\n2.全图： 基于新的要求（提示词、参数）把图重新画一遍【我觉得受到重绘幅度的影响】，尽管没涂的部分修改很小，但是还是有点点点点\n最后只保留你涂的部分拼回去\n3.仅蒙版: 就是只画框选出来的区域附近，速度快，但是没有基于图像全貌画。然后再拼回去。把这一小块当做一幅画来画。\n[坑]针对性强的修改、反而需要修改图片的尺幅：降低重绘幅度避免变形，并对提示词净化处理。 1.仅蒙版模式的边缘预留像素 4.蒙版模糊——类似羽化 消除硬接触的边缘\n10以下比较好\n太大会影响区域的读取或影响周边其他区域\n区域大可以增大，区域小可以缩小。\n局部重绘进阶 [1]inPaintSketch（手涂蒙版） 调色盘按钮\n修复的坏的手等 加蓝色爱心口罩 调色盘按钮—选黑色—画口罩——\n重绘幅度可以稍大\n蓝色\n咒语中权重降低了，因为咒语的东西复杂了，让它更稳定的产出\n玩法无限可能性大 吸管吸取背景，覆盖手的颜色，然后用肉色把手勾勒出来。\n正向提示词用上，击掌等\n负面提示词中用Negative Embeddings\n1.蒙版透明度 颜色映在图片上的透明度\n降低重绘幅度——因为太大了会让手部线条模糊+蒙版模糊也不宜过大\n如果不满意，那么随机种子多试试。\n单独使用Sketch（绘图） 直接使用Sketch\n然后重新对整个图进做一个完整的图生图，肯定会对原图有影响。\n——灵魂画手功能的实现可以用这个 不想影响就用局部修复即可 [2]上传蒙版功能应用 上传蒙版区域\nPS主体的对象选择工具，框选工具，会自动框选出来，然后套索工具-alt-ctrl-可以增加减少\n然后再\n先定义为白色\n然后选中填充的图层复制一个\n然后双击该图层前面的小白方块、填充颜色改为黑\n单机长方形\n这个长方形就是PS的蒙版了\n选中ctrl+I交换蒙版区域，就黑白换过来了。\n就导出来PNG、jpg就可了。\n人为代替了蒙版选择的了\n[坑]其他软件进行关联，无穷的潜力挖掘 更为精确的手部修复。\n总结 1.SD（Stable Diffusion）基本操作：\n使用菜单选择不同的模型（Checkpoint）。 包括 Lora 模型，提供更精确的人物或画风控制。 2.图生成图：\n上传图片并描述，使用 DeepBooru 算法反推标注。\n调整重绘幅度和分辨率，生成无缝贴图。\n包括聚焦剪裁、中央剪裁等操作，通过观察损失值调整训练过程。\n3.Prompt模板和提示词：\n设计提示词模板，权重分配和增强减弱方法。 4.VAE（Variational Auto Encoder）：\n使用加噪和去噪处理转换潜空间数据为正常图像。 5.Hypernetwork超网络模型：\n改进画面整体风格，与Lora类似但更适合创造新元素。 .6Embeddings嵌入式向量：\n优化画风，通过小文件链接到特定形象。 7.LoRa低秩适应模型：\n固定特定人物角色特征，更清晰地表达形象。 8.模型下载渠道：\nHugging Face、C站等平台获取和共享模型和数据集。 ","date":"2024-06-09T11:54:39Z","image":"http://localhost:1313/post/before/image-20240607184336146.png","permalink":"http://localhost:1313/post/sd/","title":"Stable Diffusion笔记"},{"content":"Typlog 的相册语法 介绍了图像处理中的形态学操作，以及如何使用OpenCV库来执行这些操作。括腐蚀、膨胀、开运算、闭运算、梯度运算、顶帽运算和黑帽运算。每种操作都有不同的效果和应用。\n一、噪声处理的基本操作 1.腐蚀 让图像沿着自己边界向内收缩，OpenCV通过核（kernel）来实现收缩计算。\n在形态学中，可以理解为由N个像素组成的像素块，（每一个像素块，包含一个核（kernel））在图像的边缘移动，移动的过程中，核将会在图像的边缘抹除图像和核（kernel）重合但又没有越过核心（kernel）的像素点抹除。\r例子一、消除仙人掌的刺 import cv2 import numpy as np img =cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\xtz.png\u0026#34;) k=np.ones((3,3),np.uint8)#3*3矩阵定义核的大小 cv2.imshow( \u0026#34;img\u0026#34;,img) dst=cv2.erode(img,k)#腐蚀 cv2.imshow(\u0026#34;dst\u0026#34;,dst) cv2.waitKey() cv2.destroyAllwindows( ) dst=cv2.erode(src,kernel,anchor,iterations,borderType,borderValue) 参数说明: src原始图像 kernel腐蚀使用的核 anchor可选参数 核的锚点位置 iterations可选参数 腐蚀操作的迭代次数，默认值为1，后面两个参数建议采用默认\n2.膨胀 膨胀操作与腐蚀操作相反，膨胀操作可以让图像沿着自己的边界向内扩张。\r同样是通过核来计，当核在图像的边缘移动时，核会将图像边缘填补新的像素\rimport cv2 import numpy as np img=cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\xtz.png\u0026#34;) k=np.ones((9,9),np.uint8) cv2.imshow( \u0026#34;img\u0026#34;,img) dst=cv2.dilate(img, k) cv2.imshow( \u0026#34;dst\u0026#34;,dst) cv2.waitKey() cv2.destroyAllwindows() ​```Python dst=cv2.dilate(src,kernel,anchor,iterations,borderType,borderValue)\\ 参数说明如下\nsrc原始图像 kernel膨胀使用的核 anchor可选参数核的锚点位置 iterations可选参数膨胀操作的迭代次数 后面两个为可选参数建议取默认值\n膨胀可以产生一种“近视眼”的效果。\n3.开运算 开运算是将图像先进行腐蚀操作，再进行膨胀操作。\r开运算可以用来抹除图像外部的细节。\n#开运算 import cv2 import numpy as np img=cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\tzzy.png\u0026#34;) k=np.ones((6,6),np.uint8)#创建5*5的核 cv2.imshow( \u0026#34;img \u0026#34; ,img) dst=cv2.erode(img,k)#腐蚀操作 dst=cv2.dilate(dst,k)#膨胀操作 cv2.imshow( \u0026#34;dst\u0026#34;,dst) cv2.waitKey() cv2.destroyAllWindows() 4.闭运算 闭运算是将图像先进行膨胀操作，再进行腐蚀操作。\r闭运算可以抹除图像内部的细节。\n#闭运算 import cv2 import numpy as np img = cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\rabbit.jpg\u0026#34;) img = cv2.resize(img, (900, 900)) k = np.ones((9,9),np.uint8) cv2.imshow(\u0026#34;img\u0026#34;,img) dst = cv2.dilate(img,k) dst = cv2.erode(dst,k) cv2.imshow(\u0026#34;dst2\u0026#34;,dst) cv2.waitKey() cv2.destroyAllWindows() 二、形态学其他方法： 腐蚀和膨胀都是形态学的基础操作，开运算和闭运算是两种方法的运用。除了这两种方法外，形态学还有集中比较有特点的运算，OpenCV提供了一个morphologyEx方法\r英 [mɔːˈfɒlədʒi] 美 [mɔːrˈfɑːlədʒi]\nmorphologyEx(src,op,kernel,anchor) src 原始图像\nop 操作类型\nkernel 操作过程中使用的核\nanchor 核锚点的位置\n操作类型如下：\n参数值 含义 cv2.MORPH_ERODE 腐蚀操作 cv2.MORPH_DILATE 膨胀操作 cv2.MORPH_OPEN 开运算，先腐蚀后膨胀 cv2.MORPH_CLOSE 闭运算，先膨胀后腐蚀 cv2.MORPH_GRADIENT 梯度运算，膨胀图减腐蚀图 cv2.MORPH_TOPHAT 顶帽运算，原始图减开运算图 cv2.MORPH_BLACKHAT 黑帽运算，闭运算图减原始图 1.梯度运算 梯度是指图像梯度，可以简单理解为像素的变化程度。几个连续的像素，像素的跨度值越大，梯度值就越大。\r梯度运算就是，膨胀图减去腐蚀图，就是将扩张的膨胀图挖去收缩过的腐蚀图。\r梯度运算可以得到原图的轮廓。\n#梯度运算，得到简笔画的轮廓 import cv2 import numpy as np img=cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\rabbit.jpg\u0026#34;) img = cv2.resize(img,(600,600)) k=np.ones((5,5),np.uint8)#创建5*5的核 cv2.imshow( \u0026#34;img\u0026#34; ,img) #进行梯度运算 dst=cv2.morphologyEx(img,cv2.MORPH_GRADIENT,k) cv2.imshow( \u0026#34;dst\u0026#34; ,dst)#显示梯度运算结果 cv2.waitKey() cv2.destroyAllwindows( ) 兔子为实心线条，膨胀-腐蚀后，所以会在兔子周围形成两条线。\n2.顶帽运算 原图减去原图的开运算图，就是用有细节的原图挖去去除外部细节的开运算图。也就是只剩下外部细节的图。\r顶帽运算=原图-开运算图形=外部细节图\n#顶帽运算，原图减开运算图 import cv2 import numpy as np img=cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\xtz.png\u0026#34;) k=np.ones((10,10),np.uint8) cv2.imshow( \u0026#34;img\u0026#34; ,img) dst=cv2.morphologyEx(img,cv2.MORPH_TOPHAT,k) cv2.imshow( \u0026#34;dst\u0026#34; ,dst) cv2.waitKey() cv2.destroyAllwindows() 3.黑帽运算 原图的闭运算减去原图，也就是去除内部细节的图挖去有内部细节的原图，只剩内部细节。\r黑帽运算=原图像-闭运算图像=内部细节图\n#黑帽运算 import cv2 import numpy as np img=cv2.imread(r\u0026#34;D:\\Program Files (x86)\\PyCharmProject\\pythonProject\\video-face\\rabbit.jpg\u0026#34;) img = cv2.resize(img,(600,600)) k=np.ones((3,3),np.uint8)#创建5*5的核 cv2.imshow( \u0026#34;img\u0026#34; ,img) #进行黑帽运算 dst=cv2.morphologyEx(img, cv2.MORPH_BLACKHAT,k) cv2.imshow( \u0026#34;dst\u0026#34;,dst)#显示黑帽运算结果 cv2.waitKey() cv2.destroyAllwindows() 三、总结 腐蚀操作：通过核来缩小图像中的对象，用于去除小细节或分离连接的对象。\n膨胀操作：通过核来扩大图像中的对象，用于填充空洞或连接对象。\n开运算：先腐蚀后膨胀，用于去除小物体，平滑边界，分离物体。\n闭运算：先膨胀后腐蚀，用于填充小孔，连接物体。\n梯度运算：膨胀图减腐蚀图，用于提取物体的边界。\n顶帽运算：原图减开运算图，用于提取图像中的细节。\n黑帽运算：闭运算图减原图，用于提取图像中的内部细节。\n这些形态学操作可以用于图像增强、去噪、分割和特征提取等应用。通过适当选择和组合这些操作，可以实现多种图像处理效果。\r","date":"2023-11-06T21:14:39Z","image":"http://localhost:1313/post/cover/tag-opencv.jpg","permalink":"http://localhost:1313/post/opencv/","title":"OpenCV中对图像噪声处理的常用形态学操作"},{"content":"流操作 是Java 8中引入的一种数据处理模式，通常涉及数据的读取、写入、转换、过滤等，这些操作可以在数据流上连续进行，形成一条处理链。\n例如：stream() 方法是 Java 8 引入的 Stream API 的一部分，它用于将集合（如数组、列表等）转换为流（Stream）。\n例如：能用max()和min()对流操作找到流中的最大元素。\n[参数:可用Comparator接口自定义比较的逻辑]\nimport java.util.Arrays; import java.util.Optional; import java.util.Comparator; public class StreamExample { public static void main(String[] args) { Integer[] numbers = {3, 1, 4, 1, 5, 9, 2, 6, 5}; // 使用默认比较器找到最大元素 Optional\u0026lt;Integer\u0026gt; max = Arrays.stream(numbers).max(); max.ifPresent(System.out::println); // 输出：9 // 使用默认比较器找到最小元素 Optional\u0026lt;Integer\u0026gt; min = Arrays.stream(numbers).min(); min.ifPresent(System.out::println); // 输出：1 // 使用自定义比较器找到最大元素（基于绝对值） Optional\u0026lt;Integer\u0026gt; maxAbs = Arrays.stream(numbers).max(Comparator.comparingInt(Math::abs)); maxAbs.ifPresent(System.out::println); // 输出：9 或 -5取决于绝对值的比较 } } 其中Optional\nOptional是Java8中引入的容器类，可以包含Integer对象或不含任何对象(空)。\n程序员可以避免在代码中出现大量的空值判断，从而减少了if-else控制判断的使用，提高了代码的健壮性和可读性。\n避免NullPointerException\n流操作的主要目的是简化数据处理和提高代码的可读性。通过使用流，程序员可以链式地应用一系列的操作，\n如过滤、映射、归约等，以实现对数据的转换和聚合。流操作还支持并行处理，可以充分利用多核处理器的优势，提高数据处理的速度。\n函数式编程 import java.util.Arrays; import java.util.List; import java.util.stream.Collectors; public class FunctionalOperationExample { public static void main(String[] args) { // 创建一个整数列表 List\u0026lt;Integer\u0026gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); // 使用Stream API进行函数式操作 List\u0026lt;Integer\u0026gt; squaredEvenNumbers = numbers.stream() // 将列表转换为流 .filter(n -\u0026gt; n % 2 == 0) // 过滤出偶数 .map(n -\u0026gt; n * n) // 将每个偶数平方 .collect(Collectors.toList()); // 收集结果到新的列表 // 输出结果 squaredEvenNumbers.forEach(System.out::println); } } 整个操作链以声明性的方式描述了我们的意图：找到所有偶数并将它们平方。\n我们不需要显式地编写循环或条件语句，函数式操作提供了一种更加简洁、高效和可维护的编程方式。\n流式编程的声明性主要体现在其通过一系列的操作来定义数据的转换和聚合过程，而无需显式地编写复杂的控制流代码。这使得代码更加简洁、易于理解，并且关注点更集中于数据的处理逻辑，而非流程控制。\n下面是一个使用Java 8 Stream API进行流式编程的示例，该示例体现了流式编程的声明性：\n假设我们有一个包含员工信息的列表，每个员工都有姓名（String）和薪水（double）两个属性。我们想要找出薪水最高的员工。\n首先，我们定义一个简单的Employee类：\npublic class Employee { private String name; private double salary; public Employee(String name, double salary) { this.name = name; this.salary = salary; } public String getName() { return name; } public double getSalary() { return salary; } @Override public String toString() { return \u0026#34;Employee{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, salary=\u0026#34; + salary + \u0026#39;}\u0026#39;; } } 接下来，我们创建一个包含多个Employee对象的列表，并使用流式编程找出薪水最高的员工：\nimport java.util.Arrays; import java.util.List; import java.util.Optional; public class DeclarativeStreamingExample { public static void main(String[] args) { // 创建一个员工列表 List\u0026lt;Employee\u0026gt; employees = Arrays.asList( new Employee(\u0026#34;Alice\u0026#34;, 50000), new Employee(\u0026#34;Bob\u0026#34;, 60000), new Employee(\u0026#34;Charlie\u0026#34;, 45000), new Employee(\u0026#34;David\u0026#34;, 70000) ); // 使用流式编程找出薪水最高的员工 Optional\u0026lt;Employee\u0026gt; highestPaidEmployee = employees.stream() // 转换为流 .max((e1, e2) -\u0026gt; Double.compare(e1.getSalary(), e2.getSalary())); // 根据薪水比较员工 // 处理结果 highestPaidEmployee.ifPresent(emp -\u0026gt; { System.out.println(\u0026#34;Highest paid employee is: \u0026#34; + emp); }); } } 在这个例子中，我们使用了stream()方法将员工列表转换为一个流。然后，我们调用了max()方法，并传入了一个lambda表达式作为比较器，用于比较两个员工的薪水。max()方法会返回一个Optional对象，它可能包含薪水最高的员工（如果存在的话）。最后，我们使用ifPresent()方法来处理找到的员工（如果存在）。\n这个例子体现了流式编程的声明性，因为我们没有编写显式的循环或条件语句来遍历列表和比较元素。相反，我们通过调用一系列的方法（stream(), max(), ifPresent()）并传入必要的函数式接口实例（lambda表达式）来声明我们的意图。这种方式使得代码更加简洁和易于理解，同时也更容易进行扩展和修改。\n","date":"2023-03-28T11:08:00Z","image":"http://localhost:1313/post/cover/archives-java.png","permalink":"http://localhost:1313/post/java/","title":"流操作和函数式编程"}]